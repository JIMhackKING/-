; .\Objects\Clock.SRC generated from: Clock.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE Clock.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Clock.lst) TABS(2) SRC(.\Objects\Clock.SRC)

$NOMOD51

NAME	CLOCK

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?_Delay?CLOCK     SEGMENT CODE 
?PR?Bin2Bcd?CLOCK    SEGMENT CODE 
?PR?display?CLOCK    SEGMENT CODE 
?PR?INT_Init?CLOCK   SEGMENT CODE 
?PR?TC0?CLOCK        SEGMENT CODE 
?PR?add_time?CLOCK   SEGMENT CODE 
?PR?sub_time?CLOCK   SEGMENT CODE 
?PR?key1_down?CLOCK  SEGMENT CODE 
?DT?key1_down?CLOCK  SEGMENT DATA OVERLAYABLE 
?PR?key2_down?CLOCK  SEGMENT CODE 
?DT?key2_down?CLOCK  SEGMENT DATA OVERLAYABLE 
?PR?main?CLOCK       SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?CLOCK            SEGMENT DATA 
	EXTRN	CODE (?C?SCDIV)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	dis_buff
	PUBLIC	hour
	PUBLIC	clock1
	PUBLIC	count
	PUBLIC	MODE
	PUBLIC	Dis_code
	PUBLIC	minute
	PUBLIC	main
	PUBLIC	key2_down
	PUBLIC	key1_down
	PUBLIC	sub_time
	PUBLIC	add_time
	PUBLIC	TC0
	PUBLIC	INT_Init
	PUBLIC	display
	PUBLIC	Bin2Bcd
	PUBLIC	_Delay

	RSEG  ?DT?key1_down?CLOCK
?key1_down?BYTE:
          i?744:   DS   1

	RSEG  ?DT?key2_down?CLOCK
?key2_down?BYTE:
          i?845:   DS   1

	RSEG  ?DT?CLOCK
         minute:   DS   1
       Dis_code:   DS   10
           MODE:   DS   1
          count:   DS   1
         clock1:   DS   2
           hour:   DS   1
       dis_buff:   DS   4

	RSEG  ?C_INITSEG
	DB	001H
	DB	count
	DB	000H

	DB	00AH
	DB	Dis_code
	DB	0C0H
	DB	0F9H
	DB	0A4H
	DB	0B0H
	DB	099H
	DB	092H
	DB	082H
	DB	0F8H
	DB	080H
	DB	090H

	DB	001H
	DB	hour
	DB	000H

	DB	001H
	DB	minute
	DB	000H

	DB	001H
	DB	MODE
	DB	000H

	DB	002H
	DB	clock1
	DB	001H
	DB	000H

; #include <reg52.h>
; #define uchar unsigned char
; #define uint unsigned int
; 
; uchar count=0;  // 计数总值
; uchar Dis_code[]
; ={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
; uchar dis_buff[4];  //数码管显示的所有数字
; char hour=0;  // 时
; char minute=0;  // 分
; uchar MODE=0;  // 模式选择，设置闹钟
; uchar clock1[2]={1,0};  // 闹钟
; 
; void Delay(uint del)

	RSEG  ?PR?_Delay?CLOCK
_Delay:
	USING	0
			; SOURCE LINE # 14
;---- Variable 'del?040' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 15
; 	uint i,j;
; 	for(i=0; i<del; i++)
			; SOURCE LINE # 17
;---- Variable 'i?041' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
?C0001:
	CLR  	C
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	A,R4
	SUBB 	A,R6
	JNC  	?C0007
; 	for(j=0; j<192; j++)   
			; SOURCE LINE # 18
;---- Variable 'j?042' assigned to Register 'R2/R3' ----
	CLR  	A
	MOV  	R3,A
	MOV  	R2,A
?C0004:
	INC  	R3
	CJNE 	R3,#00H,?C0041
	INC  	R2
?C0041:
	MOV  	A,R3
	XRL  	A,#0C0H
	ORL  	A,R2
	JNZ  	?C0004
?C0003:
	INC  	R5
	CJNE 	R5,#00H,?C0042
	INC  	R4
?C0042:
	SJMP 	?C0001
; 	;
; }
			; SOURCE LINE # 20
?C0007:
	RET  	
; END OF _Delay

; 
; void Bin2Bcd(void)

	RSEG  ?PR?Bin2Bcd?CLOCK
Bin2Bcd:
	USING	0
			; SOURCE LINE # 22
; {
			; SOURCE LINE # 23
; 	dis_buff[3]=hour/10;
			; SOURCE LINE # 24
	MOV  	A,hour
	MOV  	B,#0AH
	LCALL	?C?SCDIV
	MOV  	dis_buff+03H,A
; 	dis_buff[2]=hour%10;
			; SOURCE LINE # 25
	MOV  	A,hour
	MOV  	B,#0AH
	LCALL	?C?SCDIV
	MOV  	dis_buff+02H,B
; 	dis_buff[1]=minute/10;
			; SOURCE LINE # 26
	MOV  	A,minute
	MOV  	B,#0AH
	LCALL	?C?SCDIV
	MOV  	dis_buff+01H,A
; 	dis_buff[0]=minute%10;
			; SOURCE LINE # 27
	MOV  	A,minute
	MOV  	B,#0AH
	LCALL	?C?SCDIV
	MOV  	dis_buff,B
; }
			; SOURCE LINE # 28
	RET  	
; END OF Bin2Bcd

; 
; void display(void)

	RSEG  ?PR?display?CLOCK
display:
	USING	0
			; SOURCE LINE # 30
; {
			; SOURCE LINE # 31
; 	uchar i;
; 	for(i=0;i<4;i++)
			; SOURCE LINE # 33
;---- Variable 'i?243' assigned to Register 'R1' ----
	CLR  	A
	MOV  	R1,A
?C0009:
; 	{
			; SOURCE LINE # 34
; 		P2=~(0x08>>i);
			; SOURCE LINE # 35
	MOV  	A,#08H
	MOV  	R0,AR1
	INC  	R0
	SJMP 	?C0044
?C0043:
	CLR  	C
	RRC  	A
?C0044:
	DJNZ 	R0,?C0043
	CPL  	A
	MOV  	P2,A
; 		P0=Dis_code[dis_buff[i]];
			; SOURCE LINE # 36
	MOV  	A,#LOW (dis_buff)
	ADD  	A,R1
	MOV  	R0,A
	MOV  	A,@R0
	ADD  	A,#LOW (Dis_code)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	P0,A
; 		Delay(1);
			; SOURCE LINE # 37
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_Delay
; 	}
			; SOURCE LINE # 38
	INC  	R1
	CJNE 	R1,#04H,?C0009
; }
			; SOURCE LINE # 39
?C0012:
	RET  	
; END OF display

; 
; void INT_Init(void)

	RSEG  ?PR?INT_Init?CLOCK
INT_Init:
			; SOURCE LINE # 41
; {
			; SOURCE LINE # 42
; 	TMOD=0x01;  // 设置定时器0为工作方式1，16位定时/计数器
			; SOURCE LINE # 43
	MOV  	TMOD,#01H
; 	// 50ms 请求一次中断
; 	TH0=(65536-46058)/256;  // 高8位定时器初值
			; SOURCE LINE # 45
	MOV  	TH0,#04CH
; 	TL0=(65536-46058)%256;  // 低8位定时器初值
			; SOURCE LINE # 46
	MOV  	TL0,#016H
; 	EA=1;  // 开总中断
			; SOURCE LINE # 47
	SETB 	EA
; 	ET0=1;  // 定时器0中断允许
			; SOURCE LINE # 48
	SETB 	ET0
; 	TR0=1;  // 启动定时器0，开始计数
			; SOURCE LINE # 49
	SETB 	TR0
; 	//EX0=1;
; 	//IT0=1;
; }
			; SOURCE LINE # 52
	RET  	
; END OF INT_Init

CSEG	AT	0000BH
	LJMP	TC0

; 
; void TC0(void) interrupt 1

	RSEG  ?PR?TC0?CLOCK
	USING	0
TC0:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 54
; {
; 	// 11.0592MHz 晶振频率 50ms 计数值为 46080
; 	TH0=(65536-46080)/256;  // 初始化初值，如果不初始化就会是65535
			; SOURCE LINE # 57
	MOV  	TH0,#04CH
; 	TL0=(65536-46080)%256;
			; SOURCE LINE # 58
	MOV  	TL0,#00H
; 	count++;
			; SOURCE LINE # 59
	INC  	count
; 	if(count==1200)  // 1m
			; SOURCE LINE # 60
	MOV  	R7,count
	MOV  	R6,#00H
	CJNE 	R6,#04H,?C0017
	CJNE 	R7,#0B0H,?C0017
; 	{
			; SOURCE LINE # 61
; 		count=0;
			; SOURCE LINE # 62
	MOV  	count,#00H
; 		minute++;
			; SOURCE LINE # 63
	INC  	minute
; 		if(minute==60)
			; SOURCE LINE # 64
	MOV  	A,minute
	CJNE 	A,#03CH,?C0015
; 		{
			; SOURCE LINE # 65
; 			minute=0;
			; SOURCE LINE # 66
	MOV  	minute,#00H
; 			hour++;
			; SOURCE LINE # 67
	INC  	hour
; 			if(hour==24)
			; SOURCE LINE # 68
	MOV  	A,hour
	CJNE 	A,#018H,?C0015
; 				hour=0;
			; SOURCE LINE # 69
	MOV  	hour,#00H
; 		}
			; SOURCE LINE # 70
?C0015:
; 		Bin2Bcd();
			; SOURCE LINE # 71
	LCALL	Bin2Bcd
; 		P1=0xff;
			; SOURCE LINE # 72
	MOV  	P1,#0FFH
; 	}
			; SOURCE LINE # 73
; }
			; SOURCE LINE # 74
?C0017:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF TC0

; 
; // 加时
; void add_time(void)

	RSEG  ?PR?add_time?CLOCK
add_time:
			; SOURCE LINE # 77
; {
			; SOURCE LINE # 78
; 	minute++;
			; SOURCE LINE # 79
	INC  	minute
; 	if(minute==60)
			; SOURCE LINE # 80
	MOV  	A,minute
	CJNE 	A,#03CH,?C0020
; 	{
			; SOURCE LINE # 81
; 		minute=0;
			; SOURCE LINE # 82
	CLR  	A
	MOV  	minute,A
; 		hour++;
			; SOURCE LINE # 83
	INC  	hour
; 		if(hour==24)
			; SOURCE LINE # 84
	MOV  	A,hour
	CJNE 	A,#018H,?C0020
; 			hour=0;
			; SOURCE LINE # 85
	CLR  	A
	MOV  	hour,A
; 	}
			; SOURCE LINE # 86
; }
			; SOURCE LINE # 87
?C0020:
	RET  	
; END OF add_time

; 
; // 减时
; void sub_time(void)

	RSEG  ?PR?sub_time?CLOCK
sub_time:
			; SOURCE LINE # 90
; {
			; SOURCE LINE # 91
; 	minute--;
			; SOURCE LINE # 92
	DEC  	minute
; 	if(minute<0)
			; SOURCE LINE # 93
	CLR  	C
	MOV  	A,minute
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0023
; 	{
			; SOURCE LINE # 94
; 		minute=59;
			; SOURCE LINE # 95
	MOV  	minute,#03BH
; 		hour--;
			; SOURCE LINE # 96
	DEC  	hour
; 		if(hour<0)
			; SOURCE LINE # 97
	CLR  	C
	MOV  	A,hour
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0023
; 			hour=23;
			; SOURCE LINE # 98
	MOV  	hour,#017H
; 	}
			; SOURCE LINE # 99
; }
			; SOURCE LINE # 100
?C0023:
	RET  	
; END OF sub_time

; 
; void key1_down(void)

	RSEG  ?PR?key1_down?CLOCK
key1_down:
	USING	0
			; SOURCE LINE # 102
; {
			; SOURCE LINE # 103
; 	uchar i;
; 	Delay(2);
			; SOURCE LINE # 105
	MOV  	R7,#02H
	MOV  	R6,#00H
	LCALL	_Delay
; 	if(P3==0xef)
			; SOURCE LINE # 106
	MOV  	A,P3
	CJNE 	A,#0EFH,?C0028
; 	{
			; SOURCE LINE # 107
; 		add_time();
			; SOURCE LINE # 108
	LCALL	add_time
; 		for(i=0;i<20;i++)
			; SOURCE LINE # 109
	CLR  	A
	MOV  	i?744,A
?C0025:
; 		{
			; SOURCE LINE # 110
; 			Bin2Bcd();
			; SOURCE LINE # 111
	LCALL	Bin2Bcd
; 			display();
			; SOURCE LINE # 112
	LCALL	display
; 		}
			; SOURCE LINE # 113
	INC  	i?744
	MOV  	A,i?744
	CLR  	C
	SUBB 	A,#014H
	JC   	?C0025
; 	}
			; SOURCE LINE # 114
; }
			; SOURCE LINE # 115
?C0028:
	RET  	
; END OF key1_down

; 
; void key2_down(void)

	RSEG  ?PR?key2_down?CLOCK
key2_down:
	USING	0
			; SOURCE LINE # 117
; {
			; SOURCE LINE # 118
; 	uchar i;
; 	Delay(2);
			; SOURCE LINE # 120
	MOV  	R7,#02H
	MOV  	R6,#00H
	LCALL	_Delay
; 	if(P3==0xdf)
			; SOURCE LINE # 121
	MOV  	A,P3
	CJNE 	A,#0DFH,?C0033
; 	{
			; SOURCE LINE # 122
; 		sub_time();
			; SOURCE LINE # 123
	LCALL	sub_time
; 		for(i=0;i<20;i++)
			; SOURCE LINE # 124
	CLR  	A
	MOV  	i?845,A
?C0030:
; 		{
			; SOURCE LINE # 125
; 			Bin2Bcd();
			; SOURCE LINE # 126
	LCALL	Bin2Bcd
; 			display();
			; SOURCE LINE # 127
	LCALL	display
; 		}
			; SOURCE LINE # 128
	INC  	i?845
	MOV  	A,i?845
	CLR  	C
	SUBB 	A,#014H
	JC   	?C0030
; 	}
			; SOURCE LINE # 129
; }
			; SOURCE LINE # 130
?C0033:
	RET  	
; END OF key2_down

; 
; void main(void)

	RSEG  ?PR?main?CLOCK
main:
	USING	0
			; SOURCE LINE # 132
; {
			; SOURCE LINE # 133
; 	INT_Init();
			; SOURCE LINE # 134
	LCALL	INT_Init
?C0034:
; 	while(1)
			; SOURCE LINE # 135
; 	{
			; SOURCE LINE # 136
; 		display();
			; SOURCE LINE # 137
	LCALL	display
; 		if(P3==0xef) key1_down();
			; SOURCE LINE # 138
	MOV  	A,P3
	CJNE 	A,#0EFH,?C0036
	LCALL	key1_down
	SJMP 	?C0037
?C0036:
; 		else if(P3==0xdf) key2_down();
			; SOURCE LINE # 139
	MOV  	A,P3
	CJNE 	A,#0DFH,?C0037
	LCALL	key2_down
?C0037:
; 		if(hour==clock1[0]&&minute==clock1[1]) P1=0x00;
			; SOURCE LINE # 140
	MOV  	A,clock1
	CJNE 	A,hour,?C0034
	MOV  	A,clock1+01H
	CJNE 	A,minute,?C0034
	CLR  	A
	MOV  	P1,A
; 	}
			; SOURCE LINE # 141
	SJMP 	?C0034
; END OF main

	END
